/*
 * This code was auto generated by make_hipo2root.py
 * Do not modify this program.
 *
 *
 *
 * Author: Nick Tyler, University Of South Carolina
 */
// Standard libs
#include <cstdlib>
#include <iostream>
#include <time.h>
#include <vector>
// ROOT libs
#include "TFile.h"
#include "TROOT.h"
#include "TTree.h"
// Hipo libs and clipp
#include "clipp.h"
#include "hipo4/reader.h"

int main(int argc, char** argv) {
  ROOT::EnableThreadSafety();
  ROOT::EnableImplicitMT(2);
  std::string InFileName;
  std::string OutFileName;
  bool        is_mc      = false;
  bool        is_batch   = false;
  bool        is_test    = false;
  bool        print_help = false;
  bool        cov        = false;
  bool        VertDoca   = false;
  bool        traj       = false;
  bool        tbt        = false;

  auto cli = (clipp::option("-h", "--help").set(print_help) % "print help",
              clipp::option("-mc", "--MC").set(is_mc) % "Convert dst and mc banks",
              clipp::option("-b", "--batch").set(is_batch) % "Don't show progress and statistics",
              clipp::option("-c", "--cov").set(cov) % "Save Covariant Matrix for kinematic fitting",
              clipp::option("-v", "--VertDoca").set(VertDoca) % "Save VertDoca information",
              clipp::option("-t", "--traj").set(traj) % "Save traj information",
              clipp::option("-tbt", "--tbt").set(tbt) % "Save TimeBasedTrkg information",
              clipp::option("-test", "--test").set(is_test) %
                  "Only convert first 50000 events for testing",
              clipp::value("inputFile.hipo", InFileName),
              clipp::opt_value("outputFile.root", OutFileName));

  clipp::parse(argc, argv, cli);
  if (print_help || InFileName.empty()) {
    std::cout << clipp::make_man_page(cli, argv[0]);
    exit(0);
  }

  if (OutFileName.empty())
    OutFileName = InFileName + ".root";

  TFile* OutputFile = new TFile(OutFileName.c_str(), "RECREATE");
  OutputFile->SetCompressionSettings(404); // kUseAnalysis
  TTree* clas12 = new TTree("clas12", "clas12");

  auto   reader          = std::make_shared<hipo::reader>(InFileName);
  size_t tot_hipo_events = reader->numEvents();

  auto dict = std::make_shared<hipo::dictionary>();
  reader->readDictionary(*dict);
  auto hipo_event = std::make_shared<hipo::event>();

  auto rec_ForwardTagger = std::make_shared<hipo::bank>(dict->getSchema("REC::ForwardTagger"));
  auto rec_Track         = std::make_shared<hipo::bank>(dict->getSchema("REC::Track"));
  auto rec_Traj          = std::make_shared<hipo::bank>(dict->getSchema("REC::Traj"));
  auto rec_Cherenkov     = std::make_shared<hipo::bank>(dict->getSchema("REC::Cherenkov"));
  auto rec_Event         = std::make_shared<hipo::bank>(dict->getSchema("REC::Event"));
  auto rec_Particle      = std::make_shared<hipo::bank>(dict->getSchema("REC::Particle"));
  auto rec_Scintillator  = std::make_shared<hipo::bank>(dict->getSchema("REC::Scintillator"));
  auto rec_Calorimeter   = std::make_shared<hipo::bank>(dict->getSchema("REC::Calorimeter"));
  auto rec_CovMat        = std::make_shared<hipo::bank>(dict->getSchema("REC::CovMat"));
  auto mc_Header         = std::make_shared<hipo::bank>(dict->getSchema("MC::Header"));
  auto mc_Event          = std::make_shared<hipo::bank>(dict->getSchema("MC::Event"));
  auto mc_Particle       = std::make_shared<hipo::bank>(dict->getSchema("MC::Particle"));
  auto mc_Lund           = std::make_shared<hipo::bank>(dict->getSchema("MC::Lund"));

  auto tbt_Tracks  = std::make_shared<hipo::bank>(dict->getSchema("TimeBasedTrkg::TBTracks"));
  auto tbt_Crosses = std::make_shared<hipo::bank>(dict->getSchema("TimeBasedTrkg::TBCrosses"));
  auto tbt_Hits    = std::make_shared<hipo::bank>(dict->getSchema("TimeBasedTrkg::TBHits"));

  std::vector<long>   REC_Event_category_vec;
  std::vector<long>   REC_Event_topology_vec;
  std::vector<float>  REC_Event_beamCharge_vec;
  std::vector<double> REC_Event_liveTime_vec;
  std::vector<float>  REC_Event_startTime_vec;
  std::vector<float>  REC_Event_RFTime_vec;
  std::vector<int>    REC_Event_helicity_vec;
  std::vector<int>    REC_Event_helicityRaw_vec;
  std::vector<float>  REC_Event_procTime_vec;
  std::vector<int>    REC_Particle_pid_vec;
  std::vector<float>  REC_Particle_px_vec;
  std::vector<float>  REC_Particle_py_vec;
  std::vector<float>  REC_Particle_pz_vec;
  std::vector<float>  REC_Particle_vx_vec;
  std::vector<float>  REC_Particle_vy_vec;
  std::vector<float>  REC_Particle_vz_vec;
  std::vector<int>    REC_Particle_charge_vec;
  std::vector<float>  REC_Particle_beta_vec;
  std::vector<float>  REC_Particle_chi2pid_vec;
  std::vector<int>    REC_Particle_status_vec;
  std::vector<int>    REC_Calorimeter_index_vec;
  std::vector<int>    REC_Calorimeter_pindex_vec;
  std::vector<int>    REC_Calorimeter_detector_vec;
  std::vector<int>    REC_Calorimeter_sector_vec;
  std::vector<int>    REC_Calorimeter_layer_vec;
  std::vector<float>  REC_Calorimeter_energy_vec;
  std::vector<float>  REC_Calorimeter_time_vec;
  std::vector<float>  REC_Calorimeter_path_vec;
  std::vector<float>  REC_Calorimeter_chi2_vec;
  std::vector<float>  REC_Calorimeter_x_vec;
  std::vector<float>  REC_Calorimeter_y_vec;
  std::vector<float>  REC_Calorimeter_z_vec;
  std::vector<float>  REC_Calorimeter_hx_vec;
  std::vector<float>  REC_Calorimeter_hy_vec;
  std::vector<float>  REC_Calorimeter_hz_vec;
  std::vector<float>  REC_Calorimeter_lu_vec;
  std::vector<float>  REC_Calorimeter_lv_vec;
  std::vector<float>  REC_Calorimeter_lw_vec;
  std::vector<float>  REC_Calorimeter_du_vec;
  std::vector<float>  REC_Calorimeter_dv_vec;
  std::vector<float>  REC_Calorimeter_dw_vec;
  std::vector<float>  REC_Calorimeter_m2u_vec;
  std::vector<float>  REC_Calorimeter_m2v_vec;
  std::vector<float>  REC_Calorimeter_m2w_vec;
  std::vector<float>  REC_Calorimeter_m3u_vec;
  std::vector<float>  REC_Calorimeter_m3v_vec;
  std::vector<float>  REC_Calorimeter_m3w_vec;
  std::vector<int>    REC_Calorimeter_status_vec;
  std::vector<int>    REC_Cherenkov_index_vec;
  std::vector<int>    REC_Cherenkov_pindex_vec;
  std::vector<int>    REC_Cherenkov_detector_vec;
  std::vector<int>    REC_Cherenkov_sector_vec;
  std::vector<float>  REC_Cherenkov_nphe_vec;
  std::vector<float>  REC_Cherenkov_time_vec;
  std::vector<float>  REC_Cherenkov_path_vec;
  std::vector<float>  REC_Cherenkov_chi2_vec;
  std::vector<float>  REC_Cherenkov_x_vec;
  std::vector<float>  REC_Cherenkov_y_vec;
  std::vector<float>  REC_Cherenkov_z_vec;
  std::vector<float>  REC_Cherenkov_dtheta_vec;
  std::vector<float>  REC_Cherenkov_dphi_vec;
  std::vector<int>    REC_Cherenkov_status_vec;
  std::vector<int>    REC_ForwardTagger_index_vec;
  std::vector<int>    REC_ForwardTagger_pindex_vec;
  std::vector<int>    REC_ForwardTagger_detector_vec;
  std::vector<int>    REC_ForwardTagger_layer_vec;
  std::vector<float>  REC_ForwardTagger_energy_vec;
  std::vector<float>  REC_ForwardTagger_time_vec;
  std::vector<float>  REC_ForwardTagger_path_vec;
  std::vector<float>  REC_ForwardTagger_chi2_vec;
  std::vector<float>  REC_ForwardTagger_x_vec;
  std::vector<float>  REC_ForwardTagger_y_vec;
  std::vector<float>  REC_ForwardTagger_z_vec;
  std::vector<float>  REC_ForwardTagger_dx_vec;
  std::vector<float>  REC_ForwardTagger_dy_vec;
  std::vector<float>  REC_ForwardTagger_radius_vec;
  std::vector<int>    REC_ForwardTagger_size_vec;
  std::vector<int>    REC_ForwardTagger_status_vec;
  std::vector<int>    REC_Scintillator_index_vec;
  std::vector<int>    REC_Scintillator_pindex_vec;
  std::vector<int>    REC_Scintillator_detector_vec;
  std::vector<int>    REC_Scintillator_sector_vec;
  std::vector<int>    REC_Scintillator_layer_vec;
  std::vector<int>    REC_Scintillator_component_vec;
  std::vector<float>  REC_Scintillator_energy_vec;
  std::vector<float>  REC_Scintillator_time_vec;
  std::vector<float>  REC_Scintillator_path_vec;
  std::vector<float>  REC_Scintillator_chi2_vec;
  std::vector<float>  REC_Scintillator_x_vec;
  std::vector<float>  REC_Scintillator_y_vec;
  std::vector<float>  REC_Scintillator_z_vec;
  std::vector<float>  REC_Scintillator_hx_vec;
  std::vector<float>  REC_Scintillator_hy_vec;
  std::vector<float>  REC_Scintillator_hz_vec;
  std::vector<int>    REC_Scintillator_status_vec;
  std::vector<int>    REC_Track_index_vec;
  std::vector<int>    REC_Track_pindex_vec;
  std::vector<int>    REC_Track_detector_vec;
  std::vector<int>    REC_Track_sector_vec;
  std::vector<int>    REC_Track_status_vec;
  std::vector<int>    REC_Track_q_vec;
  std::vector<float>  REC_Track_chi2_vec;
  std::vector<int>    REC_Track_NDF_vec;

  std::vector<int>   TBT_Tracks_id_vec;
  std::vector<int>   TBT_Tracks_sector_vec;
  std::vector<float> TBT_Tracks_vx_vec;
  std::vector<float> TBT_Tracks_vy_vec;
  std::vector<float> TBT_Tracks_vz_vec;
  std::vector<float> TBT_Tracks_Cross1_ID_vec;
  std::vector<float> TBT_Tracks_Cross2_ID_vec;
  std::vector<float> TBT_Tracks_Cross3_ID_vec;
  std::vector<float> TBT_Tracks_chi2_vec;
  std::vector<int>   TBT_Tracks_ndf_vec;
  std::vector<int>   TBT_Crosses_id_vec;
  std::vector<int>   TBT_Crosses_sector_vec;
  std::vector<int>   TBT_Crosses_region_vec;
  std::vector<float> TBT_Crosses_x_vec;
  std::vector<float> TBT_Crosses_y_vec;
  std::vector<float> TBT_Crosses_z_vec;
  std::vector<float> TBT_Crosses_err_x_vec;
  std::vector<float> TBT_Crosses_err_y_vec;
  std::vector<float> TBT_Crosses_err_z_vec;
  std::vector<float> TBT_Crosses_ux_vec;
  std::vector<float> TBT_Crosses_uy_vec;
  std::vector<float> TBT_Crosses_uz_vec;
  std::vector<float> TBT_Crosses_err_ux_vec;
  std::vector<float> TBT_Crosses_err_uy_vec;
  std::vector<float> TBT_Crosses_err_uz_vec;
  std::vector<int>   TBT_Hits_id_vec;
  std::vector<int>   TBT_Hits_sector_vec;
  std::vector<int>   TBT_Hits_superlayer_vec;
  std::vector<int>   TBT_Hits_layer_vec;
  std::vector<int>   TBT_Hits_wire_vec;
  std::vector<int>   TBT_Hits_trkID_vec;
  std::vector<float> TBT_Hits_doca_vec;
  std::vector<float> TBT_Hits_docaError_vec;
  std::vector<float> TBT_Hits_trkDoca_vec;
  std::vector<float> TBT_Hits_timeResidual_vec;
  std::vector<float> TBT_Hits_fitResidual_vec;

  std::vector<int>   REC_CovMat_index_vec;
  std::vector<int>   REC_CovMat_pindex_vec;
  std::vector<float> REC_CovMat_C11_vec;
  std::vector<float> REC_CovMat_C12_vec;
  std::vector<float> REC_CovMat_C13_vec;
  std::vector<float> REC_CovMat_C14_vec;
  std::vector<float> REC_CovMat_C15_vec;
  std::vector<float> REC_CovMat_C22_vec;
  std::vector<float> REC_CovMat_C23_vec;
  std::vector<float> REC_CovMat_C24_vec;
  std::vector<float> REC_CovMat_C25_vec;
  std::vector<float> REC_CovMat_C33_vec;
  std::vector<float> REC_CovMat_C34_vec;
  std::vector<float> REC_CovMat_C35_vec;
  std::vector<float> REC_CovMat_C44_vec;
  std::vector<float> REC_CovMat_C45_vec;
  std::vector<float> REC_CovMat_C55_vec;
  std::vector<int>   REC_VertDoca_index1_vec;
  std::vector<int>   REC_VertDoca_index2_vec;
  std::vector<float> REC_VertDoca_x_vec;
  std::vector<float> REC_VertDoca_y_vec;
  std::vector<float> REC_VertDoca_z_vec;
  std::vector<float> REC_VertDoca_x1_vec;
  std::vector<float> REC_VertDoca_y1_vec;
  std::vector<float> REC_VertDoca_z1_vec;
  std::vector<float> REC_VertDoca_cx1_vec;
  std::vector<float> REC_VertDoca_cy1_vec;
  std::vector<float> REC_VertDoca_cz1_vec;
  std::vector<float> REC_VertDoca_x2_vec;
  std::vector<float> REC_VertDoca_y2_vec;
  std::vector<float> REC_VertDoca_z2_vec;
  std::vector<float> REC_VertDoca_cx2_vec;
  std::vector<float> REC_VertDoca_cy2_vec;
  std::vector<float> REC_VertDoca_cz2_vec;
  std::vector<float> REC_VertDoca_r_vec;
  std::vector<int>   REC_Traj_pindex_vec;
  std::vector<int>   REC_Traj_index_vec;
  std::vector<int>   REC_Traj_detector_vec;
  std::vector<int>   REC_Traj_layer_vec;
  std::vector<int>   REC_Traj_q_vec;
  std::vector<float> REC_Traj_x_vec;
  std::vector<float> REC_Traj_y_vec;
  std::vector<float> REC_Traj_z_vec;
  std::vector<float> REC_Traj_cx_vec;
  std::vector<float> REC_Traj_cy_vec;
  std::vector<float> REC_Traj_cz_vec;
  std::vector<float> REC_Traj_path_vec;

  std::vector<int>   MC_Header_run_vec;
  std::vector<int>   MC_Header_event_vec;
  std::vector<int>   MC_Header_type_vec;
  std::vector<float> MC_Header_helicity_vec;
  std::vector<int>   MC_Event_npart_vec;
  std::vector<float> MC_Event_ebeam_vec;
  std::vector<float> MC_Event_weight_vec;
  std::vector<int>   MC_Particle_pid_vec;
  std::vector<float> MC_Particle_px_vec;
  std::vector<float> MC_Particle_py_vec;
  std::vector<float> MC_Particle_pz_vec;
  std::vector<float> MC_Particle_vx_vec;
  std::vector<float> MC_Particle_vy_vec;
  std::vector<float> MC_Particle_vz_vec;
  std::vector<float> MC_Particle_vt_vec;
  std::vector<int>   MC_Lund_pid_vec;
  std::vector<float> MC_Lund_mass_vec;
  std::vector<float> MC_Lund_E_vec;
  std::vector<float> MC_Lund_px_vec;
  std::vector<float> MC_Lund_py_vec;
  std::vector<float> MC_Lund_pz_vec;
  std::vector<float> MC_Lund_vx_vec;
  std::vector<float> MC_Lund_vy_vec;
  std::vector<float> MC_Lund_vz_vec;

  clas12->Branch("REC_Event_category", &REC_Event_category_vec);
  clas12->Branch("REC_Event_topology", &REC_Event_topology_vec);
  clas12->Branch("REC_Event_beamCharge", &REC_Event_beamCharge_vec);
  clas12->Branch("REC_Event_liveTime", &REC_Event_liveTime_vec);
  clas12->Branch("REC_Event_startTime", &REC_Event_startTime_vec);
  clas12->Branch("REC_Event_RFTime", &REC_Event_RFTime_vec);
  clas12->Branch("REC_Event_helicity", &REC_Event_helicity_vec);
  clas12->Branch("REC_Event_helicityRaw", &REC_Event_helicityRaw_vec);
  clas12->Branch("REC_Event_procTime", &REC_Event_procTime_vec);
  clas12->Branch("REC_Particle_pid", &REC_Particle_pid_vec);
  clas12->Branch("REC_Particle_px", &REC_Particle_px_vec);
  clas12->Branch("REC_Particle_py", &REC_Particle_py_vec);
  clas12->Branch("REC_Particle_pz", &REC_Particle_pz_vec);
  clas12->Branch("REC_Particle_vx", &REC_Particle_vx_vec);
  clas12->Branch("REC_Particle_vy", &REC_Particle_vy_vec);
  clas12->Branch("REC_Particle_vz", &REC_Particle_vz_vec);
  clas12->Branch("REC_Particle_charge", &REC_Particle_charge_vec);
  clas12->Branch("REC_Particle_beta", &REC_Particle_beta_vec);
  clas12->Branch("REC_Particle_chi2pid", &REC_Particle_chi2pid_vec);
  clas12->Branch("REC_Particle_status", &REC_Particle_status_vec);

  if (is_mc) {
    clas12->Branch("MC_Header_run", &MC_Header_run_vec);
    clas12->Branch("MC_Header_event", &MC_Header_event_vec);
    clas12->Branch("MC_Header_type", &MC_Header_type_vec);
    clas12->Branch("MC_Header_helicity", &MC_Header_helicity_vec);

    clas12->Branch("MC_Event_npart", &MC_Event_npart_vec);
    clas12->Branch("MC_Event_ebeam", &MC_Event_ebeam_vec);
    clas12->Branch("MC_Event_weight", &MC_Event_weight_vec);

    clas12->Branch("MC_Particle_pid", &MC_Particle_pid_vec);
    clas12->Branch("MC_Particle_px", &MC_Particle_px_vec);
    clas12->Branch("MC_Particle_py", &MC_Particle_py_vec);
    clas12->Branch("MC_Particle_pz", &MC_Particle_pz_vec);
    clas12->Branch("MC_Particle_vx", &MC_Particle_vx_vec);
    clas12->Branch("MC_Particle_vy", &MC_Particle_vy_vec);
    clas12->Branch("MC_Particle_vz", &MC_Particle_vz_vec);
    clas12->Branch("MC_Particle_vt", &MC_Particle_vt_vec);

    clas12->Branch("MC_Lund_pid", &MC_Lund_pid_vec);
    clas12->Branch("MC_Lund_mass", &MC_Lund_mass_vec);
    clas12->Branch("MC_Lund_E", &MC_Lund_E_vec);
    clas12->Branch("MC_Lund_px", &MC_Lund_px_vec);
    clas12->Branch("MC_Lund_py", &MC_Lund_py_vec);
    clas12->Branch("MC_Lund_pz", &MC_Lund_pz_vec);
    clas12->Branch("MC_Lund_vx", &MC_Lund_vx_vec);
    clas12->Branch("MC_Lund_vy", &MC_Lund_vy_vec);
    clas12->Branch("MC_Lund_vz", &MC_Lund_vz_vec);
  }

  clas12->Branch("REC_Calorimeter_index", &REC_Calorimeter_index_vec);
  clas12->Branch("REC_Calorimeter_pindex", &REC_Calorimeter_pindex_vec);
  clas12->Branch("REC_Calorimeter_detector", &REC_Calorimeter_detector_vec);
  clas12->Branch("REC_Calorimeter_sector", &REC_Calorimeter_sector_vec);
  clas12->Branch("REC_Calorimeter_layer", &REC_Calorimeter_layer_vec);
  clas12->Branch("REC_Calorimeter_energy", &REC_Calorimeter_energy_vec);
  clas12->Branch("REC_Calorimeter_time", &REC_Calorimeter_time_vec);
  clas12->Branch("REC_Calorimeter_path", &REC_Calorimeter_path_vec);
  clas12->Branch("REC_Calorimeter_chi2", &REC_Calorimeter_chi2_vec);
  clas12->Branch("REC_Calorimeter_x", &REC_Calorimeter_x_vec);
  clas12->Branch("REC_Calorimeter_y", &REC_Calorimeter_y_vec);
  clas12->Branch("REC_Calorimeter_z", &REC_Calorimeter_z_vec);
  clas12->Branch("REC_Calorimeter_hx", &REC_Calorimeter_hx_vec);
  clas12->Branch("REC_Calorimeter_hy", &REC_Calorimeter_hy_vec);
  clas12->Branch("REC_Calorimeter_hz", &REC_Calorimeter_hz_vec);
  clas12->Branch("REC_Calorimeter_lu", &REC_Calorimeter_lu_vec);
  clas12->Branch("REC_Calorimeter_lv", &REC_Calorimeter_lv_vec);
  clas12->Branch("REC_Calorimeter_lw", &REC_Calorimeter_lw_vec);
  clas12->Branch("REC_Calorimeter_du", &REC_Calorimeter_du_vec);
  clas12->Branch("REC_Calorimeter_dv", &REC_Calorimeter_dv_vec);
  clas12->Branch("REC_Calorimeter_dw", &REC_Calorimeter_dw_vec);
  clas12->Branch("REC_Calorimeter_m2u", &REC_Calorimeter_m2u_vec);
  clas12->Branch("REC_Calorimeter_m2v", &REC_Calorimeter_m2v_vec);
  clas12->Branch("REC_Calorimeter_m2w", &REC_Calorimeter_m2w_vec);
  clas12->Branch("REC_Calorimeter_m3u", &REC_Calorimeter_m3u_vec);
  clas12->Branch("REC_Calorimeter_m3v", &REC_Calorimeter_m3v_vec);
  clas12->Branch("REC_Calorimeter_m3w", &REC_Calorimeter_m3w_vec);
  clas12->Branch("REC_Calorimeter_status", &REC_Calorimeter_status_vec);
  clas12->Branch("REC_Cherenkov_index", &REC_Cherenkov_index_vec);
  clas12->Branch("REC_Cherenkov_pindex", &REC_Cherenkov_pindex_vec);
  clas12->Branch("REC_Cherenkov_detector", &REC_Cherenkov_detector_vec);
  clas12->Branch("REC_Cherenkov_sector", &REC_Cherenkov_sector_vec);
  clas12->Branch("REC_Cherenkov_nphe", &REC_Cherenkov_nphe_vec);
  clas12->Branch("REC_Cherenkov_time", &REC_Cherenkov_time_vec);
  clas12->Branch("REC_Cherenkov_path", &REC_Cherenkov_path_vec);
  clas12->Branch("REC_Cherenkov_chi2", &REC_Cherenkov_chi2_vec);
  clas12->Branch("REC_Cherenkov_x", &REC_Cherenkov_x_vec);
  clas12->Branch("REC_Cherenkov_y", &REC_Cherenkov_y_vec);
  clas12->Branch("REC_Cherenkov_z", &REC_Cherenkov_z_vec);
  clas12->Branch("REC_Cherenkov_dtheta", &REC_Cherenkov_dtheta_vec);
  clas12->Branch("REC_Cherenkov_dphi", &REC_Cherenkov_dphi_vec);
  clas12->Branch("REC_Cherenkov_status", &REC_Cherenkov_status_vec);
  clas12->Branch("REC_ForwardTagger_index", &REC_ForwardTagger_index_vec);
  clas12->Branch("REC_ForwardTagger_pindex", &REC_ForwardTagger_pindex_vec);
  clas12->Branch("REC_ForwardTagger_detector", &REC_ForwardTagger_detector_vec);
  clas12->Branch("REC_ForwardTagger_layer", &REC_ForwardTagger_layer_vec);
  clas12->Branch("REC_ForwardTagger_energy", &REC_ForwardTagger_energy_vec);
  clas12->Branch("REC_ForwardTagger_time", &REC_ForwardTagger_time_vec);
  clas12->Branch("REC_ForwardTagger_path", &REC_ForwardTagger_path_vec);
  clas12->Branch("REC_ForwardTagger_chi2", &REC_ForwardTagger_chi2_vec);
  clas12->Branch("REC_ForwardTagger_x", &REC_ForwardTagger_x_vec);
  clas12->Branch("REC_ForwardTagger_y", &REC_ForwardTagger_y_vec);
  clas12->Branch("REC_ForwardTagger_z", &REC_ForwardTagger_z_vec);
  clas12->Branch("REC_ForwardTagger_dx", &REC_ForwardTagger_dx_vec);
  clas12->Branch("REC_ForwardTagger_dy", &REC_ForwardTagger_dy_vec);
  clas12->Branch("REC_ForwardTagger_radius", &REC_ForwardTagger_radius_vec);
  clas12->Branch("REC_ForwardTagger_size", &REC_ForwardTagger_size_vec);
  clas12->Branch("REC_ForwardTagger_status", &REC_ForwardTagger_status_vec);
  clas12->Branch("REC_Scintillator_index", &REC_Scintillator_index_vec);
  clas12->Branch("REC_Scintillator_pindex", &REC_Scintillator_pindex_vec);
  clas12->Branch("REC_Scintillator_detector", &REC_Scintillator_detector_vec);
  clas12->Branch("REC_Scintillator_sector", &REC_Scintillator_sector_vec);
  clas12->Branch("REC_Scintillator_layer", &REC_Scintillator_layer_vec);
  clas12->Branch("REC_Scintillator_component", &REC_Scintillator_component_vec);
  clas12->Branch("REC_Scintillator_energy", &REC_Scintillator_energy_vec);
  clas12->Branch("REC_Scintillator_time", &REC_Scintillator_time_vec);
  clas12->Branch("REC_Scintillator_path", &REC_Scintillator_path_vec);
  clas12->Branch("REC_Scintillator_chi2", &REC_Scintillator_chi2_vec);
  clas12->Branch("REC_Scintillator_x", &REC_Scintillator_x_vec);
  clas12->Branch("REC_Scintillator_y", &REC_Scintillator_y_vec);
  clas12->Branch("REC_Scintillator_z", &REC_Scintillator_z_vec);
  clas12->Branch("REC_Scintillator_hx", &REC_Scintillator_hx_vec);
  clas12->Branch("REC_Scintillator_hy", &REC_Scintillator_hy_vec);
  clas12->Branch("REC_Scintillator_hz", &REC_Scintillator_hz_vec);
  clas12->Branch("REC_Scintillator_status", &REC_Scintillator_status_vec);
  clas12->Branch("REC_Track_index", &REC_Track_index_vec);
  clas12->Branch("REC_Track_pindex", &REC_Track_pindex_vec);
  clas12->Branch("REC_Track_detector", &REC_Track_detector_vec);
  clas12->Branch("REC_Track_sector", &REC_Track_sector_vec);
  clas12->Branch("REC_Track_status", &REC_Track_status_vec);
  clas12->Branch("REC_Track_q", &REC_Track_q_vec);
  clas12->Branch("REC_Track_chi2", &REC_Track_chi2_vec);
  clas12->Branch("REC_Track_NDF", &REC_Track_NDF_vec);
  if (tbt) {
    clas12->Branch("TBT_Tracks_id", &TBT_Tracks_id_vec);
    clas12->Branch("TBT_Tracks_sector", &TBT_Tracks_sector_vec);
    clas12->Branch("TBT_Tracks_vx", &TBT_Tracks_vx_vec);
    clas12->Branch("TBT_Tracks_vy", &TBT_Tracks_vy_vec);
    clas12->Branch("TBT_Tracks_vz", &TBT_Tracks_vz_vec);
    clas12->Branch("TBT_Tracks_Cross1_ID", &TBT_Tracks_Cross1_ID_vec);
    clas12->Branch("TBT_Tracks_Cross2_ID", &TBT_Tracks_Cross2_ID_vec);
    clas12->Branch("TBT_Tracks_Cross3_ID", &TBT_Tracks_Cross3_ID_vec);
    clas12->Branch("TBT_Tracks_chi2", &TBT_Tracks_chi2_vec);
    clas12->Branch("TBT_Tracks_ndf", &TBT_Tracks_ndf_vec);
    clas12->Branch("TBT_Crosses_id", &TBT_Crosses_id_vec);
    clas12->Branch("TBT_Crosses_sector", &TBT_Crosses_sector_vec);
    clas12->Branch("TBT_Crosses_region", &TBT_Crosses_region_vec);
    clas12->Branch("TBT_Crosses_x", &TBT_Crosses_x_vec);
    clas12->Branch("TBT_Crosses_y", &TBT_Crosses_y_vec);
    clas12->Branch("TBT_Crosses_z", &TBT_Crosses_z_vec);
    clas12->Branch("TBT_Crosses_err_x", &TBT_Crosses_err_x_vec);
    clas12->Branch("TBT_Crosses_err_y", &TBT_Crosses_err_y_vec);
    clas12->Branch("TBT_Crosses_err_z", &TBT_Crosses_err_z_vec);
    clas12->Branch("TBT_Crosses_ux", &TBT_Crosses_ux_vec);
    clas12->Branch("TBT_Crosses_uy", &TBT_Crosses_uy_vec);
    clas12->Branch("TBT_Crosses_uz", &TBT_Crosses_uz_vec);
    clas12->Branch("TBT_Crosses_err_ux", &TBT_Crosses_err_ux_vec);
    clas12->Branch("TBT_Crosses_err_uy", &TBT_Crosses_err_uy_vec);
    clas12->Branch("TBT_Crosses_err_uz", &TBT_Crosses_err_uz_vec);
    clas12->Branch("TBT_Hits_id", &TBT_Hits_id_vec);
    clas12->Branch("TBT_Hits_sector", &TBT_Hits_sector_vec);
    clas12->Branch("TBT_Hits_superlayer", &TBT_Hits_superlayer_vec);
    clas12->Branch("TBT_Hits_layer", &TBT_Hits_layer_vec);
    clas12->Branch("TBT_Hits_wire", &TBT_Hits_wire_vec);
    clas12->Branch("TBT_Hits_trkID", &TBT_Hits_trkID_vec);
    clas12->Branch("TBT_Hits_doca", &TBT_Hits_doca_vec);
    clas12->Branch("TBT_Hits_docaError", &TBT_Hits_docaError_vec);
    clas12->Branch("TBT_Hits_trkDoca", &TBT_Hits_trkDoca_vec);
    clas12->Branch("TBT_Hits_timeResidual", &TBT_Hits_timeResidual_vec);
    clas12->Branch("TBT_Hits_fitResidual", &TBT_Hits_fitResidual_vec);
  }
  if (cov) {
    clas12->Branch("REC_CovMat_index", &REC_CovMat_index_vec);
    clas12->Branch("REC_CovMat_pindex", &REC_CovMat_pindex_vec);
    clas12->Branch("REC_CovMat_C11", &REC_CovMat_C11_vec);
    clas12->Branch("REC_CovMat_C12", &REC_CovMat_C12_vec);
    clas12->Branch("REC_CovMat_C13", &REC_CovMat_C13_vec);
    clas12->Branch("REC_CovMat_C14", &REC_CovMat_C14_vec);
    clas12->Branch("REC_CovMat_C15", &REC_CovMat_C15_vec);
    clas12->Branch("REC_CovMat_C22", &REC_CovMat_C22_vec);
    clas12->Branch("REC_CovMat_C23", &REC_CovMat_C23_vec);
    clas12->Branch("REC_CovMat_C24", &REC_CovMat_C24_vec);
    clas12->Branch("REC_CovMat_C25", &REC_CovMat_C25_vec);
    clas12->Branch("REC_CovMat_C33", &REC_CovMat_C33_vec);
    clas12->Branch("REC_CovMat_C34", &REC_CovMat_C34_vec);
    clas12->Branch("REC_CovMat_C35", &REC_CovMat_C35_vec);
    clas12->Branch("REC_CovMat_C44", &REC_CovMat_C44_vec);
    clas12->Branch("REC_CovMat_C45", &REC_CovMat_C45_vec);
    clas12->Branch("REC_CovMat_C55", &REC_CovMat_C55_vec);
  }
  if (VertDoca) {
    clas12->Branch("REC_VertDoca_index1", &REC_VertDoca_index1_vec);
    clas12->Branch("REC_VertDoca_index2", &REC_VertDoca_index2_vec);
    clas12->Branch("REC_VertDoca_x", &REC_VertDoca_x_vec);
    clas12->Branch("REC_VertDoca_y", &REC_VertDoca_y_vec);
    clas12->Branch("REC_VertDoca_z", &REC_VertDoca_z_vec);
    clas12->Branch("REC_VertDoca_x1", &REC_VertDoca_x1_vec);
    clas12->Branch("REC_VertDoca_y1", &REC_VertDoca_y1_vec);
    clas12->Branch("REC_VertDoca_z1", &REC_VertDoca_z1_vec);
    clas12->Branch("REC_VertDoca_cx1", &REC_VertDoca_cx1_vec);
    clas12->Branch("REC_VertDoca_cy1", &REC_VertDoca_cy1_vec);
    clas12->Branch("REC_VertDoca_cz1", &REC_VertDoca_cz1_vec);
    clas12->Branch("REC_VertDoca_x2", &REC_VertDoca_x2_vec);
    clas12->Branch("REC_VertDoca_y2", &REC_VertDoca_y2_vec);
    clas12->Branch("REC_VertDoca_z2", &REC_VertDoca_z2_vec);
    clas12->Branch("REC_VertDoca_cx2", &REC_VertDoca_cx2_vec);
    clas12->Branch("REC_VertDoca_cy2", &REC_VertDoca_cy2_vec);
    clas12->Branch("REC_VertDoca_cz2", &REC_VertDoca_cz2_vec);
    clas12->Branch("REC_VertDoca_r", &REC_VertDoca_r_vec);
  }
  if (traj) {
    clas12->Branch("REC_Traj_pindex", &REC_Traj_pindex_vec);
    clas12->Branch("REC_Traj_index", &REC_Traj_index_vec);
    clas12->Branch("REC_Traj_detector", &REC_Traj_detector_vec);
    clas12->Branch("REC_Traj_layer", &REC_Traj_layer_vec);
    clas12->Branch("REC_Traj_x", &REC_Traj_x_vec);
    clas12->Branch("REC_Traj_y", &REC_Traj_y_vec);
    clas12->Branch("REC_Traj_z", &REC_Traj_z_vec);
    clas12->Branch("REC_Traj_cx", &REC_Traj_cx_vec);
    clas12->Branch("REC_Traj_cy", &REC_Traj_cy_vec);
    clas12->Branch("REC_Traj_cz", &REC_Traj_cz_vec);
    clas12->Branch("REC_Traj_path", &REC_Traj_path_vec);
  }

  int  entry      = 0;
  int  l          = 0;
  auto start_full = std::chrono::high_resolution_clock::now();
  while (reader->next() == true) {
    if (is_test && entry > 50000)
      break;

    reader->read(*hipo_event);
    hipo_event->getStructure(*rec_Particle);
    hipo_event->getStructure(*rec_ForwardTagger);
    hipo_event->getStructure(*rec_Track);
    hipo_event->getStructure(*rec_Cherenkov);
    hipo_event->getStructure(*rec_Event);
    hipo_event->getStructure(*rec_Scintillator);
    hipo_event->getStructure(*rec_Calorimeter);
    if (cov)
      hipo_event->getStructure(*rec_CovMat);
    if (traj)
      hipo_event->getStructure(*rec_Traj);
    if (is_mc) {
      hipo_event->getStructure(*mc_Header);
      hipo_event->getStructure(*mc_Particle);
      hipo_event->getStructure(*mc_Event);
      hipo_event->getStructure(*mc_Lund);
    }
    if (tbt) {
      hipo_event->getStructure(*tbt_Tracks);
      hipo_event->getStructure(*tbt_Crosses);
      hipo_event->getStructure(*tbt_Hits);
    }

    if (!is_batch && (++entry % 10000) == 0)
      std::cout << "\t" << floor(100 * entry / tot_hipo_events) << "%\r\r" << std::flush;

    if (is_mc) {

      l = mc_Header->getRows();
      if (l != -1) {
        MC_Header_run_vec.resize(l);
        MC_Header_event_vec.resize(l);
        MC_Header_type_vec.resize(l);
        MC_Header_helicity_vec.resize(l);
        for (int i = 0; i < l; i++) {
          MC_Header_run_vec[i]      = mc_Header->getInt(0, i);
          MC_Header_event_vec[i]    = mc_Header->getInt(1, i);
          MC_Header_type_vec[i]     = mc_Header->getInt(2, i);
          MC_Header_helicity_vec[i] = mc_Header->getFloat(3, i);
        }
      }

      l = mc_Event->getRows();
      MC_Event_npart_vec.resize(l);
      MC_Event_ebeam_vec.resize(l);
      MC_Event_weight_vec.resize(l);
      for (int i = 0; i < l; i++) {
        MC_Event_npart_vec[i]  = mc_Event->getInt(0, i);
        MC_Event_ebeam_vec[i]  = mc_Event->getFloat(6, i);
        MC_Event_weight_vec[i] = mc_Event->getFloat(9, i);
      }

      l = mc_Particle->getRows();
      if (l != -1) {
        MC_Particle_pid_vec.resize(l);
        MC_Particle_px_vec.resize(l);
        MC_Particle_py_vec.resize(l);
        MC_Particle_pz_vec.resize(l);
        MC_Particle_vx_vec.resize(l);
        MC_Particle_vy_vec.resize(l);
        MC_Particle_vz_vec.resize(l);
        MC_Particle_vt_vec.resize(l);
        for (int i = 0; i < l; i++) {
          MC_Particle_pid_vec[i] = mc_Particle->getInt(0, i);
          MC_Particle_px_vec[i]  = mc_Particle->getFloat(1, i);
          MC_Particle_py_vec[i]  = mc_Particle->getFloat(2, i);
          MC_Particle_pz_vec[i]  = mc_Particle->getFloat(3, i);
          MC_Particle_vx_vec[i]  = mc_Particle->getFloat(4, i);
          MC_Particle_vy_vec[i]  = mc_Particle->getFloat(5, i);
          MC_Particle_vz_vec[i]  = mc_Particle->getFloat(6, i);
          MC_Particle_vt_vec[i]  = mc_Particle->getFloat(7, i);
        }
      }

      l = mc_Lund->getRows();
      if (l != -1) {
        MC_Lund_pid_vec.resize(l);
        MC_Lund_px_vec.resize(l);
        MC_Lund_py_vec.resize(l);
        MC_Lund_pz_vec.resize(l);
        MC_Lund_vx_vec.resize(l);
        MC_Lund_vy_vec.resize(l);
        MC_Lund_vz_vec.resize(l);
        MC_Lund_mass_vec.resize(l);
        MC_Lund_E_vec.resize(l);

        for (int i = 0; i < l; i++) {
          MC_Lund_pid_vec[i]  = mc_Lund->getInt(3, i);
          MC_Lund_px_vec[i]   = mc_Lund->getFloat(6, i);
          MC_Lund_py_vec[i]   = mc_Lund->getFloat(7, i);
          MC_Lund_pz_vec[i]   = mc_Lund->getFloat(8, i);
          MC_Lund_E_vec[i]    = mc_Lund->getFloat(9, i);
          MC_Lund_mass_vec[i] = mc_Lund->getFloat(10, i);
          MC_Lund_vx_vec[i]   = mc_Lund->getFloat(11, i);
          MC_Lund_vy_vec[i]   = mc_Lund->getFloat(12, i);
          MC_Lund_vz_vec[i]   = mc_Lund->getFloat(13, i);
        }
      }
    }

    l = rec_Event->getRows();
    if (l != -1) {
      REC_Event_category_vec.resize(l);
      REC_Event_topology_vec.resize(l);
      REC_Event_beamCharge_vec.resize(l);
      REC_Event_liveTime_vec.resize(l);
      REC_Event_startTime_vec.resize(l);
      REC_Event_RFTime_vec.resize(l);
      REC_Event_helicity_vec.resize(l);
      REC_Event_helicityRaw_vec.resize(l);
      REC_Event_procTime_vec.resize(l);

      for (int i = 0; i < l; i++) {
        REC_Event_category_vec[i]   = rec_Event->getLong(0, i);
        REC_Event_topology_vec[i]   = rec_Event->getLong(1, i);
        REC_Event_beamCharge_vec[i] = rec_Event->getFloat(2, i);
        REC_Event_liveTime_vec[i]   = rec_Event->getDouble(3, i);
        REC_Event_startTime_vec[i] =
            ((rec_Event->getFloat(4, i) != -1000) ? rec_Event->getFloat(4, i) : NAN);
        REC_Event_RFTime_vec[i]      = rec_Event->getFloat(5, i);
        REC_Event_helicity_vec[i]    = rec_Event->getByte(6, i);
        REC_Event_helicityRaw_vec[i] = rec_Event->getByte(7, i);
        REC_Event_procTime_vec[i]    = rec_Event->getFloat(8, i);
      }
    }
    l = rec_Particle->getRows();
    if (l != -1) {
      REC_Particle_pid_vec.resize(l);
      REC_Particle_px_vec.resize(l);
      REC_Particle_py_vec.resize(l);
      REC_Particle_pz_vec.resize(l);
      REC_Particle_vx_vec.resize(l);
      REC_Particle_vy_vec.resize(l);
      REC_Particle_vz_vec.resize(l);
      REC_Particle_charge_vec.resize(l);
      REC_Particle_beta_vec.resize(l);
      REC_Particle_chi2pid_vec.resize(l);
      REC_Particle_status_vec.resize(l);

      for (int i = 0; i < l; i++) {
        REC_Particle_pid_vec[i]    = rec_Particle->getInt(0, i);
        REC_Particle_px_vec[i]     = rec_Particle->getFloat(1, i);
        REC_Particle_py_vec[i]     = rec_Particle->getFloat(2, i);
        REC_Particle_pz_vec[i]     = rec_Particle->getFloat(3, i);
        REC_Particle_vx_vec[i]     = rec_Particle->getFloat(4, i);
        REC_Particle_vy_vec[i]     = rec_Particle->getFloat(5, i);
        REC_Particle_vz_vec[i]     = rec_Particle->getFloat(6, i);
        REC_Particle_charge_vec[i] = rec_Particle->getInt(7, i);
        REC_Particle_beta_vec[i] =
            ((rec_Particle->getFloat(8, i) != -9999) ? rec_Particle->getFloat(8, i) : NAN);
        REC_Particle_chi2pid_vec[i] = rec_Particle->getFloat(9, i);
        REC_Particle_status_vec[i]  = rec_Particle->getInt(10, i);
      }
    }
    l = rec_Calorimeter->getRows();
    if (l != -1) {
      REC_Calorimeter_index_vec.resize(l);
      REC_Calorimeter_pindex_vec.resize(l);
      REC_Calorimeter_detector_vec.resize(l);
      REC_Calorimeter_sector_vec.resize(l);
      REC_Calorimeter_layer_vec.resize(l);
      REC_Calorimeter_energy_vec.resize(l);
      REC_Calorimeter_time_vec.resize(l);
      REC_Calorimeter_path_vec.resize(l);
      REC_Calorimeter_chi2_vec.resize(l);
      REC_Calorimeter_x_vec.resize(l);
      REC_Calorimeter_y_vec.resize(l);
      REC_Calorimeter_z_vec.resize(l);
      REC_Calorimeter_hx_vec.resize(l);
      REC_Calorimeter_hy_vec.resize(l);
      REC_Calorimeter_hz_vec.resize(l);
      REC_Calorimeter_lu_vec.resize(l);
      REC_Calorimeter_lv_vec.resize(l);
      REC_Calorimeter_lw_vec.resize(l);
      REC_Calorimeter_du_vec.resize(l);
      REC_Calorimeter_dv_vec.resize(l);
      REC_Calorimeter_dw_vec.resize(l);
      REC_Calorimeter_m2u_vec.resize(l);
      REC_Calorimeter_m2v_vec.resize(l);
      REC_Calorimeter_m2w_vec.resize(l);
      REC_Calorimeter_m3u_vec.resize(l);
      REC_Calorimeter_m3v_vec.resize(l);
      REC_Calorimeter_m3w_vec.resize(l);
      REC_Calorimeter_status_vec.resize(l);

      for (int i = 0; i < l; i++) {
        REC_Calorimeter_index_vec[i]    = rec_Calorimeter->getInt(0, i);
        REC_Calorimeter_pindex_vec[i]   = rec_Calorimeter->getInt(1, i);
        REC_Calorimeter_detector_vec[i] = rec_Calorimeter->getInt(2, i);
        REC_Calorimeter_sector_vec[i]   = rec_Calorimeter->getInt(3, i);
        REC_Calorimeter_layer_vec[i]    = rec_Calorimeter->getInt(4, i);
        REC_Calorimeter_energy_vec[i]   = rec_Calorimeter->getFloat(5, i);
        REC_Calorimeter_time_vec[i]     = rec_Calorimeter->getFloat(6, i);
        REC_Calorimeter_path_vec[i]     = rec_Calorimeter->getFloat(7, i);
        REC_Calorimeter_chi2_vec[i]     = rec_Calorimeter->getFloat(8, i);
        REC_Calorimeter_x_vec[i]        = rec_Calorimeter->getFloat(9, i);
        REC_Calorimeter_y_vec[i]        = rec_Calorimeter->getFloat(10, i);
        REC_Calorimeter_z_vec[i]        = rec_Calorimeter->getFloat(11, i);
        REC_Calorimeter_hx_vec[i]       = rec_Calorimeter->getFloat(12, i);
        REC_Calorimeter_hy_vec[i]       = rec_Calorimeter->getFloat(13, i);
        REC_Calorimeter_hz_vec[i]       = rec_Calorimeter->getFloat(14, i);
        REC_Calorimeter_lu_vec[i]       = rec_Calorimeter->getFloat(15, i);
        REC_Calorimeter_lv_vec[i]       = rec_Calorimeter->getFloat(16, i);
        REC_Calorimeter_lw_vec[i]       = rec_Calorimeter->getFloat(17, i);
        REC_Calorimeter_du_vec[i]       = rec_Calorimeter->getFloat(18, i);
        REC_Calorimeter_dv_vec[i]       = rec_Calorimeter->getFloat(19, i);
        REC_Calorimeter_dw_vec[i]       = rec_Calorimeter->getFloat(20, i);
        REC_Calorimeter_m2u_vec[i]      = rec_Calorimeter->getFloat(21, i);
        REC_Calorimeter_m2v_vec[i]      = rec_Calorimeter->getFloat(22, i);
        REC_Calorimeter_m2w_vec[i]      = rec_Calorimeter->getFloat(23, i);
        REC_Calorimeter_m3u_vec[i]      = rec_Calorimeter->getFloat(24, i);
        REC_Calorimeter_m3v_vec[i]      = rec_Calorimeter->getFloat(25, i);
        REC_Calorimeter_m3w_vec[i]      = rec_Calorimeter->getFloat(26, i);
        REC_Calorimeter_status_vec[i]   = rec_Calorimeter->getInt(27, i);
      }
    }
    l = rec_Cherenkov->getRows();
    if (l != -1) {
      REC_Cherenkov_index_vec.resize(l);
      REC_Cherenkov_pindex_vec.resize(l);
      REC_Cherenkov_detector_vec.resize(l);
      REC_Cherenkov_sector_vec.resize(l);
      REC_Cherenkov_nphe_vec.resize(l);
      REC_Cherenkov_time_vec.resize(l);
      REC_Cherenkov_path_vec.resize(l);
      REC_Cherenkov_chi2_vec.resize(l);
      REC_Cherenkov_x_vec.resize(l);
      REC_Cherenkov_y_vec.resize(l);
      REC_Cherenkov_z_vec.resize(l);
      REC_Cherenkov_dtheta_vec.resize(l);
      REC_Cherenkov_dphi_vec.resize(l);
      REC_Cherenkov_status_vec.resize(l);

      for (int i = 0; i < l; i++) {
        REC_Cherenkov_index_vec[i]    = rec_Cherenkov->getInt(0, i);
        REC_Cherenkov_pindex_vec[i]   = rec_Cherenkov->getInt(1, i);
        REC_Cherenkov_detector_vec[i] = rec_Cherenkov->getInt(2, i);
        REC_Cherenkov_sector_vec[i]   = rec_Cherenkov->getInt(3, i);
        REC_Cherenkov_nphe_vec[i]     = rec_Cherenkov->getFloat(4, i);
        REC_Cherenkov_time_vec[i]     = rec_Cherenkov->getFloat(5, i);
        REC_Cherenkov_path_vec[i]     = rec_Cherenkov->getFloat(6, i);
        REC_Cherenkov_chi2_vec[i]     = rec_Cherenkov->getFloat(7, i);
        REC_Cherenkov_x_vec[i]        = rec_Cherenkov->getFloat(8, i);
        REC_Cherenkov_y_vec[i]        = rec_Cherenkov->getFloat(9, i);
        REC_Cherenkov_z_vec[i]        = rec_Cherenkov->getFloat(10, i);
        REC_Cherenkov_dtheta_vec[i]   = rec_Cherenkov->getFloat(11, i);
        REC_Cherenkov_dphi_vec[i]     = rec_Cherenkov->getFloat(12, i);
        REC_Cherenkov_status_vec[i]   = rec_Cherenkov->getShort(13, i);
      }
    }
    l = rec_Scintillator->getRows();
    if (l != -1) {
      REC_Scintillator_index_vec.resize(l);
      REC_Scintillator_pindex_vec.resize(l);
      REC_Scintillator_detector_vec.resize(l);
      REC_Scintillator_sector_vec.resize(l);
      REC_Scintillator_layer_vec.resize(l);
      REC_Scintillator_component_vec.resize(l);
      REC_Scintillator_energy_vec.resize(l);
      REC_Scintillator_time_vec.resize(l);
      REC_Scintillator_path_vec.resize(l);
      REC_Scintillator_chi2_vec.resize(l);
      REC_Scintillator_x_vec.resize(l);
      REC_Scintillator_y_vec.resize(l);
      REC_Scintillator_z_vec.resize(l);
      REC_Scintillator_hx_vec.resize(l);
      REC_Scintillator_hy_vec.resize(l);
      REC_Scintillator_hz_vec.resize(l);
      REC_Scintillator_status_vec.resize(l);

      for (int i = 0; i < l; i++) {
        REC_Scintillator_index_vec[i]     = rec_Scintillator->getInt(0, i);
        REC_Scintillator_pindex_vec[i]    = rec_Scintillator->getInt(1, i);
        REC_Scintillator_detector_vec[i]  = rec_Scintillator->getInt(2, i);
        REC_Scintillator_sector_vec[i]    = rec_Scintillator->getInt(3, i);
        REC_Scintillator_layer_vec[i]     = rec_Scintillator->getInt(4, i);
        REC_Scintillator_component_vec[i] = rec_Scintillator->getInt(5, i);
        REC_Scintillator_energy_vec[i]    = rec_Scintillator->getFloat(6, i);
        REC_Scintillator_time_vec[i]      = rec_Scintillator->getFloat(7, i);
        REC_Scintillator_path_vec[i]      = rec_Scintillator->getFloat(8, i);
        REC_Scintillator_chi2_vec[i]      = rec_Scintillator->getFloat(9, i);
        REC_Scintillator_x_vec[i]         = rec_Scintillator->getFloat(10, i);
        REC_Scintillator_y_vec[i]         = rec_Scintillator->getFloat(11, i);
        REC_Scintillator_z_vec[i]         = rec_Scintillator->getFloat(12, i);
        REC_Scintillator_hx_vec[i]        = rec_Scintillator->getFloat(13, i);
        REC_Scintillator_hy_vec[i]        = rec_Scintillator->getFloat(14, i);
        REC_Scintillator_hz_vec[i]        = rec_Scintillator->getFloat(15, i);
        REC_Scintillator_status_vec[i]    = rec_Scintillator->getInt(16, i);
      }
    }
    l = rec_ForwardTagger->getRows();
    if (l != -1) {
      REC_ForwardTagger_index_vec.resize(l);
      REC_ForwardTagger_pindex_vec.resize(l);
      REC_ForwardTagger_detector_vec.resize(l);
      REC_ForwardTagger_layer_vec.resize(l);
      REC_ForwardTagger_energy_vec.resize(l);
      REC_ForwardTagger_time_vec.resize(l);
      REC_ForwardTagger_path_vec.resize(l);
      REC_ForwardTagger_chi2_vec.resize(l);
      REC_ForwardTagger_x_vec.resize(l);
      REC_ForwardTagger_y_vec.resize(l);
      REC_ForwardTagger_z_vec.resize(l);
      REC_ForwardTagger_dx_vec.resize(l);
      REC_ForwardTagger_dy_vec.resize(l);
      REC_ForwardTagger_radius_vec.resize(l);
      REC_ForwardTagger_size_vec.resize(l);
      REC_ForwardTagger_status_vec.resize(l);
      for (int i = 0; i < l; i++) {
        REC_ForwardTagger_index_vec[i]    = rec_ForwardTagger->getInt(0, i);
        REC_ForwardTagger_pindex_vec[i]   = rec_ForwardTagger->getInt(1, i);
        REC_ForwardTagger_detector_vec[i] = rec_ForwardTagger->getInt(2, i);
        REC_ForwardTagger_layer_vec[i]    = rec_ForwardTagger->getInt(3, i);
        REC_ForwardTagger_energy_vec[i]   = rec_ForwardTagger->getFloat(4, i);
        REC_ForwardTagger_time_vec[i]     = rec_ForwardTagger->getFloat(5, i);
        REC_ForwardTagger_path_vec[i]     = rec_ForwardTagger->getFloat(6, i);
        REC_ForwardTagger_chi2_vec[i]     = rec_ForwardTagger->getFloat(7, i);
        REC_ForwardTagger_x_vec[i]        = rec_ForwardTagger->getFloat(8, i);
        REC_ForwardTagger_y_vec[i]        = rec_ForwardTagger->getFloat(9, i);
        REC_ForwardTagger_z_vec[i]        = rec_ForwardTagger->getFloat(10, i);
        REC_ForwardTagger_dx_vec[i]       = rec_ForwardTagger->getFloat(11, i);
        REC_ForwardTagger_dy_vec[i]       = rec_ForwardTagger->getFloat(12, i);
        REC_ForwardTagger_radius_vec[i]   = rec_ForwardTagger->getFloat(13, i);
        REC_ForwardTagger_size_vec[i]     = rec_ForwardTagger->getShort(14, i);
        REC_ForwardTagger_status_vec[i]   = rec_ForwardTagger->getShort(15, i);
      }
    }

    l = rec_Track->getRows();
    if (l != -1) {
      REC_Track_index_vec.resize(l);
      REC_Track_pindex_vec.resize(l);
      REC_Track_detector_vec.resize(l);
      REC_Track_sector_vec.resize(l);
      REC_Track_status_vec.resize(l);
      REC_Track_q_vec.resize(l);
      REC_Track_chi2_vec.resize(l);
      REC_Track_NDF_vec.resize(l);

      for (int i = 0; i < l; i++) {
        REC_Track_index_vec[i]    = rec_Track->getShort(0, i);
        REC_Track_pindex_vec[i]   = rec_Track->getShort(1, i);
        REC_Track_detector_vec[i] = rec_Track->getByte(2, i);
        REC_Track_sector_vec[i]   = rec_Track->getByte(3, i);
        REC_Track_status_vec[i]   = rec_Track->getShort(4, i);
        REC_Track_q_vec[i]        = rec_Track->getByte(5, i);
        REC_Track_chi2_vec[i]     = rec_Track->getFloat(6, i);
        REC_Track_NDF_vec[i]      = rec_Track->getShort(7, i);
      }
    }
    if (cov) {
      l = rec_CovMat->getRows();
      if (l != -1) {
        REC_CovMat_index_vec.resize(l);
        REC_CovMat_pindex_vec.resize(l);
        REC_CovMat_C11_vec.resize(l);
        REC_CovMat_C12_vec.resize(l);
        REC_CovMat_C13_vec.resize(l);
        REC_CovMat_C14_vec.resize(l);
        REC_CovMat_C15_vec.resize(l);
        REC_CovMat_C22_vec.resize(l);
        REC_CovMat_C23_vec.resize(l);
        REC_CovMat_C24_vec.resize(l);
        REC_CovMat_C25_vec.resize(l);
        REC_CovMat_C33_vec.resize(l);
        REC_CovMat_C34_vec.resize(l);
        REC_CovMat_C35_vec.resize(l);
        REC_CovMat_C44_vec.resize(l);
        REC_CovMat_C45_vec.resize(l);
        REC_CovMat_C55_vec.resize(l);

        for (int i = 0; i < l; i++) {
          REC_CovMat_index_vec[i]  = rec_CovMat->getInt(0, i);
          REC_CovMat_pindex_vec[i] = rec_CovMat->getInt(1, i);
          REC_CovMat_C11_vec[i]    = rec_CovMat->getFloat(2, i);
          REC_CovMat_C12_vec[i]    = rec_CovMat->getFloat(3, i);
          REC_CovMat_C13_vec[i]    = rec_CovMat->getFloat(4, i);
          REC_CovMat_C14_vec[i]    = rec_CovMat->getFloat(5, i);
          REC_CovMat_C15_vec[i]    = rec_CovMat->getFloat(6, i);
          REC_CovMat_C22_vec[i]    = rec_CovMat->getFloat(7, i);
          REC_CovMat_C23_vec[i]    = rec_CovMat->getFloat(8, i);
          REC_CovMat_C24_vec[i]    = rec_CovMat->getFloat(9, i);
          REC_CovMat_C25_vec[i]    = rec_CovMat->getFloat(10, i);
          REC_CovMat_C33_vec[i]    = rec_CovMat->getFloat(11, i);
          REC_CovMat_C34_vec[i]    = rec_CovMat->getFloat(12, i);
          REC_CovMat_C35_vec[i]    = rec_CovMat->getFloat(13, i);
          REC_CovMat_C44_vec[i]    = rec_CovMat->getFloat(14, i);
          REC_CovMat_C45_vec[i]    = rec_CovMat->getFloat(15, i);
          REC_CovMat_C55_vec[i]    = rec_CovMat->getFloat(16, i);
        }
      }
    }

    if (tbt) {
      l = tbt_Tracks->getRows();
      TBT_Tracks_id_vec.resize(l);
      TBT_Tracks_sector_vec.resize(l);
      TBT_Tracks_vx_vec.resize(l);
      TBT_Tracks_vy_vec.resize(l);
      TBT_Tracks_vz_vec.resize(l);
      TBT_Tracks_Cross1_ID_vec.resize(l);
      TBT_Tracks_Cross2_ID_vec.resize(l);
      TBT_Tracks_Cross3_ID_vec.resize(l);
      TBT_Tracks_chi2_vec.resize(l);
      TBT_Tracks_ndf_vec.resize(l);

      for (int i = 0; i < l; i++) {
        TBT_Tracks_id_vec[i]     = tbt_Tracks->getInt(0, i);
        TBT_Tracks_sector_vec[i] = tbt_Tracks->getInt(2, i);
        /*
                TBT_Tracks_vx_vec[i]        = tbt_Tracks->getFloat(21, i);
                TBT_Tracks_vy_vec[i]        = tbt_Tracks->getFloat(22, i);
                TBT_Tracks_vz_vec[i]        = tbt_Tracks->getFloat(23, i);
        */
        TBT_Tracks_Cross1_ID_vec[i] = tbt_Tracks->getFloat(27, i);
        TBT_Tracks_Cross2_ID_vec[i] = tbt_Tracks->getFloat(28, i);
        TBT_Tracks_Cross3_ID_vec[i] = tbt_Tracks->getFloat(29, i);
        TBT_Tracks_chi2_vec[i]      = tbt_Tracks->getFloat(32, i);
        TBT_Tracks_ndf_vec[i]       = tbt_Tracks->getInt(33, i);
      }

      l = tbt_Crosses->getRows();
      TBT_Crosses_id_vec.resize(l);
      TBT_Crosses_sector_vec.resize(l);
      TBT_Crosses_region_vec.resize(l);
      TBT_Crosses_x_vec.resize(l);
      TBT_Crosses_y_vec.resize(l);
      TBT_Crosses_z_vec.resize(l);
      TBT_Crosses_err_x_vec.resize(l);
      TBT_Crosses_err_y_vec.resize(l);
      TBT_Crosses_err_z_vec.resize(l);
      TBT_Crosses_ux_vec.resize(l);
      TBT_Crosses_uy_vec.resize(l);
      TBT_Crosses_uz_vec.resize(l);
      TBT_Crosses_err_ux_vec.resize(l);
      TBT_Crosses_err_uy_vec.resize(l);
      TBT_Crosses_err_uz_vec.resize(l);

      for (int i = 0; i < l; i++) {
        TBT_Crosses_id_vec[i]     = tbt_Crosses->getInt(0, i);
        TBT_Crosses_sector_vec[i] = tbt_Crosses->getInt(2, i);
        TBT_Crosses_region_vec[i] = tbt_Crosses->getInt(3, i);
        TBT_Crosses_x_vec[i]      = tbt_Crosses->getFloat(4, i);
        TBT_Crosses_y_vec[i]      = tbt_Crosses->getFloat(5, i);
        TBT_Crosses_z_vec[i]      = tbt_Crosses->getFloat(6, i);
        TBT_Crosses_err_x_vec[i]  = tbt_Crosses->getFloat(7, i);
        TBT_Crosses_err_y_vec[i]  = tbt_Crosses->getFloat(8, i);
        TBT_Crosses_err_z_vec[i]  = tbt_Crosses->getFloat(9, i);
        TBT_Crosses_ux_vec[i]     = tbt_Crosses->getFloat(10, i);
        TBT_Crosses_uy_vec[i]     = tbt_Crosses->getFloat(11, i);
        TBT_Crosses_uz_vec[i]     = tbt_Crosses->getFloat(12, i);
        TBT_Crosses_err_ux_vec[i] = tbt_Crosses->getFloat(13, i);
        TBT_Crosses_err_uy_vec[i] = tbt_Crosses->getFloat(14, i);
        TBT_Crosses_err_uz_vec[i] = tbt_Crosses->getFloat(15, i);
      }

      TBT_Hits_id_vec.resize(l);
      TBT_Hits_sector_vec.resize(l);
      TBT_Hits_superlayer_vec.resize(l);
      TBT_Hits_layer_vec.resize(l);
      TBT_Hits_wire_vec.resize(l);
      TBT_Hits_trkID_vec.resize(l);
      TBT_Hits_doca_vec.resize(l);
      TBT_Hits_docaError_vec.resize(l);
      TBT_Hits_trkDoca_vec.resize(l);
      TBT_Hits_timeResidual_vec.resize(l);
      TBT_Hits_fitResidual_vec.resize(l);
    }

    if (VertDoca) {
      // index1/S
      // index2/S
      // x/F
      // y/F
      // z/F
      // x1/F
      // y1/F
      // z1/F
      // cx1/F
      // cy1/F
      // cz1/F
      // x2/F
      // y2/F
      // z2/F
      // cx2/F
      // cy2/F
      // cz2/F
      // r/F
      std::cerr << "VertDoca Not implemented yet" << '\n';
    }

    if (traj) {
      l = rec_Traj->getRows();
      if (l != -1) {
        REC_Traj_pindex_vec.resize(l);
        REC_Traj_index_vec.resize(l);
        REC_Traj_detector_vec.resize(l);
        REC_Traj_layer_vec.resize(l);
        REC_Traj_x_vec.resize(l);
        REC_Traj_y_vec.resize(l);
        REC_Traj_z_vec.resize(l);
        REC_Traj_cx_vec.resize(l);
        REC_Traj_cy_vec.resize(l);
        REC_Traj_cz_vec.resize(l);
        REC_Traj_path_vec.resize(l);

        for (int i = 0; i < l; i++) {
          REC_Traj_index_vec[i]    = rec_Traj->getInt(0, i);
          REC_Traj_pindex_vec[i]   = rec_Traj->getInt(1, i);
          REC_Traj_detector_vec[i] = rec_Traj->getInt(2, i);
          REC_Traj_layer_vec[i]    = rec_Traj->getInt(3, i);
          REC_Traj_x_vec[i]        = rec_Traj->getFloat(4, i);
          REC_Traj_y_vec[i]        = rec_Traj->getFloat(5, i);
          REC_Traj_z_vec[i]        = rec_Traj->getFloat(6, i);
          REC_Traj_cx_vec[i]       = rec_Traj->getFloat(7, i);
          REC_Traj_cy_vec[i]       = rec_Traj->getFloat(8, i);
          REC_Traj_cz_vec[i]       = rec_Traj->getFloat(9, i);
          REC_Traj_path_vec[i]     = rec_Traj->getFloat(10, i);
        }
      }
    }

    clas12->Fill();
    /*
    REC_Event_category_vec.clear();
    REC_Event_topology_vec.clear();
    REC_Event_beamCharge_vec.clear();
    REC_Event_liveTime_vec.clear();
    REC_Event_startTime_vec.clear();
    REC_Event_RFTime_vec.clear();
    REC_Event_helicity_vec.clear();
    REC_Event_helicityRaw_vec.clear();
    REC_Event_procTime_vec.clear();
    REC_Particle_pid_vec.clear();
    REC_Particle_px_vec.clear();
    REC_Particle_py_vec.clear();
    REC_Particle_pz_vec.clear();
    REC_Particle_vx_vec.clear();
    REC_Particle_vy_vec.clear();
    REC_Particle_vz_vec.clear();
    REC_Particle_charge_vec.clear();
    REC_Particle_beta_vec.clear();
    REC_Particle_chi2pid_vec.clear();
    REC_Particle_status_vec.clear();
    REC_Calorimeter_index_vec.clear();
    REC_Calorimeter_pindex_vec.clear();
    REC_Calorimeter_detector_vec.clear();
    REC_Calorimeter_sector_vec.clear();
    REC_Calorimeter_layer_vec.clear();
    REC_Calorimeter_energy_vec.clear();
    REC_Calorimeter_time_vec.clear();
    REC_Calorimeter_path_vec.clear();
    REC_Calorimeter_chi2_vec.clear();
    REC_Calorimeter_x_vec.clear();
    REC_Calorimeter_y_vec.clear();
    REC_Calorimeter_z_vec.clear();
    REC_Calorimeter_hx_vec.clear();
    REC_Calorimeter_hy_vec.clear();
    REC_Calorimeter_hz_vec.clear();
    REC_Calorimeter_lu_vec.clear();
    REC_Calorimeter_lv_vec.clear();
    REC_Calorimeter_lw_vec.clear();
    REC_Calorimeter_du_vec.clear();
    REC_Calorimeter_dv_vec.clear();
    REC_Calorimeter_dw_vec.clear();
    REC_Calorimeter_m2u_vec.clear();
    REC_Calorimeter_m2v_vec.clear();
    REC_Calorimeter_m2w_vec.clear();
    REC_Calorimeter_m3u_vec.clear();
    REC_Calorimeter_m3v_vec.clear();
    REC_Calorimeter_m3w_vec.clear();
    REC_Calorimeter_status_vec.clear();
    REC_Cherenkov_index_vec.clear();
    REC_Cherenkov_pindex_vec.clear();
    REC_Cherenkov_detector_vec.clear();
    REC_Cherenkov_sector_vec.clear();
    REC_Cherenkov_nphe_vec.clear();
    REC_Cherenkov_time_vec.clear();
    REC_Cherenkov_path_vec.clear();
    REC_Cherenkov_chi2_vec.clear();
    REC_Cherenkov_x_vec.clear();
    REC_Cherenkov_y_vec.clear();
    REC_Cherenkov_z_vec.clear();
    REC_Cherenkov_dtheta_vec.clear();
    REC_Cherenkov_dphi_vec.clear();
    REC_Cherenkov_status_vec.clear();
    REC_ForwardTagger_index_vec.clear();
    REC_ForwardTagger_pindex_vec.clear();
    REC_ForwardTagger_detector_vec.clear();
    REC_ForwardTagger_layer_vec.clear();
    REC_ForwardTagger_energy_vec.clear();
    REC_ForwardTagger_time_vec.clear();
    REC_ForwardTagger_path_vec.clear();
    REC_ForwardTagger_chi2_vec.clear();
    REC_ForwardTagger_x_vec.clear();
    REC_ForwardTagger_y_vec.clear();
    REC_ForwardTagger_z_vec.clear();
    REC_ForwardTagger_dx_vec.clear();
    REC_ForwardTagger_dy_vec.clear();
    REC_ForwardTagger_radius_vec.clear();
    REC_ForwardTagger_size_vec.clear();
    REC_ForwardTagger_status_vec.clear();
    REC_Scintillator_index_vec.clear();
    REC_Scintillator_pindex_vec.clear();
    REC_Scintillator_detector_vec.clear();
    REC_Scintillator_sector_vec.clear();
    REC_Scintillator_layer_vec.clear();
    REC_Scintillator_component_vec.clear();
    REC_Scintillator_energy_vec.clear();
    REC_Scintillator_time_vec.clear();
    REC_Scintillator_path_vec.clear();
    REC_Scintillator_chi2_vec.clear();
    REC_Scintillator_x_vec.clear();
    REC_Scintillator_y_vec.clear();
    REC_Scintillator_z_vec.clear();
    REC_Scintillator_hx_vec.clear();
    REC_Scintillator_hy_vec.clear();
    REC_Scintillator_hz_vec.clear();
    REC_Scintillator_status_vec.clear();
    REC_Track_index_vec.clear();
    REC_Track_pindex_vec.clear();
    REC_Track_detector_vec.clear();
    REC_Track_sector_vec.clear();
    REC_Track_status_vec.clear();
    REC_Track_q_vec.clear();
    REC_Track_chi2_vec.clear();
    REC_Track_NDF_vec.clear();
    REC_CovMat_index_vec.clear();
    REC_CovMat_pindex_vec.clear();
    REC_CovMat_C11_vec.clear();
    REC_CovMat_C12_vec.clear();
    REC_CovMat_C13_vec.clear();
    REC_CovMat_C14_vec.clear();
    REC_CovMat_C15_vec.clear();
    REC_CovMat_C22_vec.clear();
    REC_CovMat_C23_vec.clear();
    REC_CovMat_C24_vec.clear();
    REC_CovMat_C25_vec.clear();
    REC_CovMat_C33_vec.clear();
    REC_CovMat_C34_vec.clear();
    REC_CovMat_C35_vec.clear();
    REC_CovMat_C44_vec.clear();
    REC_CovMat_C45_vec.clear();
    REC_CovMat_C55_vec.clear();
    REC_VertDoca_index1_vec.clear();
    REC_VertDoca_index2_vec.clear();
    REC_VertDoca_x_vec.clear();
    REC_VertDoca_y_vec.clear();
    REC_VertDoca_z_vec.clear();
    REC_VertDoca_x1_vec.clear();
    REC_VertDoca_y1_vec.clear();
    REC_VertDoca_z1_vec.clear();
    REC_VertDoca_cx1_vec.clear();
    REC_VertDoca_cy1_vec.clear();
    REC_VertDoca_cz1_vec.clear();
    REC_VertDoca_x2_vec.clear();
    REC_VertDoca_y2_vec.clear();
    REC_VertDoca_z2_vec.clear();
    REC_VertDoca_cx2_vec.clear();
    REC_VertDoca_cy2_vec.clear();
    REC_VertDoca_cz2_vec.clear();
    REC_VertDoca_r_vec.clear();
    REC_Traj_pindex_vec.clear();
    REC_Traj_index_vec.clear();
    REC_Traj_detector_vec.clear();
    REC_Traj_layer_vec.clear();
    REC_Traj_x_vec.clear();
    REC_Traj_y_vec.clear();
    REC_Traj_z_vec.clear();
    REC_Traj_cx_vec.clear();
    REC_Traj_cy_vec.clear();
    REC_Traj_cz_vec.clear();
    REC_Traj_path_vec.clear();
    MC_Header_run_vec.clear();
    MC_Header_event_vec.clear();
    MC_Header_type_vec.clear();
    MC_Header_helicity_vec.clear();
    MC_Particle_pid_vec.clear();
    MC_Particle_px_vec.clear();
    MC_Particle_py_vec.clear();
    MC_Particle_pz_vec.clear();
    MC_Particle_vx_vec.clear();
    MC_Particle_vy_vec.clear();
    MC_Particle_vz_vec.clear();
    MC_Particle_vt_vec.clear();
    */
  }
  OutputFile->cd();
  clas12->Write();
  OutputFile->Close();

  if (!is_batch) {
    std::chrono::duration<double> elapsed_full =
        (std::chrono::high_resolution_clock::now() - start_full);
    std::cout << "Elapsed time: " << elapsed_full.count() << " s" << std::endl;
    std::cout << "Events/Sec: " << entry / elapsed_full.count() << " Hz" << std::endl;
    std::cout << "Total events in file: " << entry << std::endl;
  }

  return 0;
}
